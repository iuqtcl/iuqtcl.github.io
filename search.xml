<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>05 Containers</title>
    <url>/2023/01/19/05_containers/</url>
    <content><![CDATA[<h2 id="containers"><a href="#containers" class="headerlink" title="containers"></a>containers</h2><h4 id="defining-containers"><a href="#defining-containers" class="headerlink" title="defining containers"></a>defining containers</h4><p><em>vector,stack,queue</em></p>
<h4 id="two-types"><a href="#two-types" class="headerlink" title="two types"></a>two types</h4><p>1.sequence:</p>
<pre><code>vector,deque,list
</code></pre>
<p>2.associative: 通过key访问数据</p>
<pre><code>map,set

ordered/unordered
</code></pre>
<p><strong>map</strong></p>
<p>make_pair实现</p>
<h4 id="container-adaptors"><a href="#container-adaptors" class="headerlink" title="container adaptors"></a>container adaptors</h4><p>在基础容器的基础上实现特定接口&#x2F;操作</p>
<p>具体实现没太懂</p>
<p><img src="https://i.imgur.com/PQrSCk9.png"></p>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>06 Iterators and Pointers</title>
    <url>/2023/01/19/06_iterators_and_pointers/</url>
    <content><![CDATA[<p><em>How do we access elements in a container in order?</em></p>
<p><em>How do we reference existing data in our code?</em></p>
<h2 id="iterators"><a href="#iterators" class="headerlink" title="iterators"></a>iterators</h2><p><em>访问容器中的元素</em></p>
<p><strong>作用</strong></p>
<ol>
<li>访问容器中所有的数据</li>
<li>按序访问（找到下一项）</li>
</ol>
<p>在不同容器中的<strong>种类</strong></p>
<p><img src="https://i.imgur.com/EEXNpog.png"></p>
<p><img src="https://i.imgur.com/bqbw0zU.png"></p>
<p>取值时使用dereference(*iter)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">auto</span>&amp; elem = *iter;</span><br></pre></td></tr></table></figure>

<p>&amp;为引用</p>
<p>iterators are a type of pointer</p>
<h2 id="pointers"><a href="#pointers" class="headerlink" title="pointers"></a>pointers</h2><p><em><strong>引用</strong> 现有数据</em></p>
<p>pointers reference memory addresses</p>
<p>&amp;+variable 变量地址</p>
<p>*+pointer   取值</p>
<p>pointer声明时 type+*</p>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>07 Classes</title>
    <url>/2023/01/19/07_classes/</url>
    <content><![CDATA[<p><em>How to make your own custom types</em></p>
<h2 id="Classes-Introduction"><a href="#Classes-Introduction" class="headerlink" title="Classes Introduction"></a>Classes Introduction</h2><p><em>Containers are all classes defined in the STL</em></p>
<h4 id="issues-with-structs"><a href="#issues-with-structs" class="headerlink" title="issues with structs"></a>issues with structs</h4><ol>
<li>默认可以访问任意内部数据(public)</li>
<li>需要直接初始化每个 data member</li>
</ol>
<p>classes 提供 public interface 和 private implement</p>
<p><strong>声明结构</strong></p>
<p>declare in .h  + implement in .cpp</p>
<p>在 .cpp 中加入 .h 头文件</p>
<p>.h include .cpp</p>
<p><strong>namespace</strong></p>
<ol>
<li>防止名字冲突</li>
<li>每个类有单独的namespace</li>
</ol>
<p><strong>this</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setName</span><span class="params">(string name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name=name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Student.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Student.h&gt;</span></span></span><br><span class="line">Student::<span class="built_in">Student</span>():name&#123;<span class="string">&quot;&quot;</span>&#125;,age&#123;<span class="number">0</span>&#125;,state&#123;<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">Student::<span class="built_in">Student</span>(string name,<span class="type">int</span> age,string state)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;name=name;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>destructors</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class_name::~Class_name();</span><br></pre></td></tr></table></figure>

<p><strong>using</strong></p>
<ol>
<li><pre><code class="c++">using namespace name;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 指定别名</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">    using iterator = std::string*;</span><br><span class="line">    using size_type = size_t;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>在派生类中引用基类成员</p>
</li>
</ol>
<h4 id="operator-重载"><a href="#operator-重载" class="headerlink" title="operator 重载"></a>operator 重载</h4><p>重载[]</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::string&amp; StrVector::<span class="keyword">operator</span>[](size_type index) &#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="built_in">begin</span>() + index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>后加const表函数不修改成员数据，可以被const对象引用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure>

<p>前加const表示返回值为const类型</p>
<h2 id="Template-Class"><a href="#Template-Class" class="headerlink" title="Template Class"></a>Template Class</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> First, <span class="keyword">typename</span> Second&gt; <span class="keyword">class</span> <span class="title class_">MyPair</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">First <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Second <span class="title">getSecond</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setFirst</span><span class="params">(First f)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setSecond</span><span class="params">(Second f)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">First first;</span><br><span class="line">Second second;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>04 Initialization and References</title>
    <url>/2023/01/19/04_initialization_and_references/</url>
    <content><![CDATA[<h2 id="initialization"><a href="#initialization" class="headerlink" title="initialization"></a>initialization</h2><h5 id="uniform-initialization"><a href="#uniform-initialization" class="headerlink" title="uniform initialization"></a>uniform initialization</h5><p>大括号初始化，声明完立刻初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> x&#123;<span class="number">5</span>&#125;;</span><br><span class="line">string f&#123;<span class="string">&quot;Sarah&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h5><p>use it to reduce long type names</p>
<p>[]的使用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> [found, solutions] = <span class="built_in">quadratic</span>(a, b, c);</span><br></pre></td></tr></table></figure>

<h2 id="reference-引用-amp"><a href="#reference-引用-amp" class="headerlink" title="reference 引用  &amp;"></a>reference 引用  &amp;</h2><p><strong>引用和copy的区别</strong></p>
<p>An alias (another name) for a named variable</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; original&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; copy = original;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;&amp; ref = original;</span><br><span class="line">original.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">copy.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">ref.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">cout &lt;&lt; original &lt;&lt; endl; <span class="comment">// &#123;1, 2, 3, 5&#125;</span></span><br><span class="line">cout &lt;&lt; copy &lt;&lt; endl; <span class="comment">// &#123;1, 2, 4&#125;</span></span><br><span class="line">cout &lt;&lt; ref &lt;&lt; endl; <span class="comment">// &#123;1, 2, 3, 5&#125;</span></span><br></pre></td></tr></table></figure>

<p>You can only create references to variables</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>&amp; thisWontWork = <span class="number">5</span>; <span class="comment">// This doesn&#x27;t work!</span></span><br></pre></td></tr></table></figure>

<h5 id="const-and-const-references"><a href="#const-and-const-references" class="headerlink" title="const and const references"></a>const and const references</h5><p>const声明变量不会被改变-specify that a variable can’t be modified</p>
<p>const引用可以引不const的，反之不行</p>
<h5 id="reference使用场景"><a href="#reference使用场景" class="headerlink" title="reference使用场景"></a>reference使用场景</h5><p>1.variable占空间较大</p>
<p>2.需要改变变量</p>
<p>3.不需改变+占空间较大-&gt;用const reference</p>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>09 Template Functions</title>
    <url>/2023/01/19/09_template_functions/</url>
    <content><![CDATA[<p><em>What else in C++ can be generalized? What is the philosophy behind generalization?</em></p>
<h1 id="Template-Functions"><a href="#Template-Functions" class="headerlink" title="Template Functions"></a>Template Functions</h1><h2 id="generic-programming泛型编程"><a href="#generic-programming泛型编程" class="headerlink" title="generic programming		泛型编程"></a>generic programming		泛型编程</h2><p>参数化数据类型</p>
<p>特性：</p>
<ol>
<li>function 仅在被实例化后编译</li>
<li>可以被多次编译</li>
</ol>
<p>特性展示：逆天结构体当函数递归用</p>
<p><img src="https://i.imgur.com/MJiQbZy.png"></p>
<p>an instance</p>
<p>在任意串中计数某字符的出现次数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputType,<span class="keyword">typename</span> DataType&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_ocur</span><span class="params">(InputType begin,InputType end, DataType d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(InputType iter=begin; iter!=end; iter++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*iter==d) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usage: std::string str= <span class="string">&quot;nsannd&quot;</span>;</span><br><span class="line">		<span class="built_in">count_ocur</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>(),<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>10 Functions and Lambdas</title>
    <url>/2023/01/19/10_funcioins_and_lambdas/</url>
    <content><![CDATA[<p><em>How can we make template functions even more general?</em></p>
<h1 id="Functions-and-Lambdas"><a href="#Functions-and-Lambdas" class="headerlink" title="Functions and Lambdas"></a>Functions and Lambdas</h1><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><p>将函数作为参数</p>
<p>instance</p>
<p><img src="https://i.imgur.com/JTb45Mr.png"></p>
<p>UniPred is what’s called a function pointer</p>
<h3 id="function-pointers"><a href="#function-pointers" class="headerlink" title="function pointers"></a>function pointers</h3><ul>
<li>可当作指针处理</li>
<li>传参时跟变量一样</li>
<li>调用时可作普通function</li>
</ul>
<p>使用例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsort</span><span class="params">(<span class="type">void</span> *base, <span class="type">size_t</span> nmemb, <span class="type">size_t</span> size,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span>(*compar)(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *))</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_int_func</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;%d\n&quot;</span>, x );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">void</span> (*foo)(<span class="type">int</span>);</span><br><span class="line">    foo = &amp;my_int_func;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* call my_int_func (note that you do not need to write (*foo)(2) ) */</span></span><br><span class="line">    <span class="built_in">foo</span>( <span class="number">2</span> );</span><br><span class="line">    <span class="comment">/* but if you want to, you may */</span></span><br><span class="line">    (*foo)( <span class="number">2</span> );</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="use-lambdas"><a href="#use-lambdas" class="headerlink" title="use lambdas"></a>use lambdas</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> car = [capture-clause] (<span class="keyword">auto</span> param) -&gt; <span class="type">bool</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//function body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>capture clause:</p>
<p>capture any outside variable by reference&#x2F;value.</p>
<p><img src="https://i.imgur.com/c9ePu1h.png"></p>
<p>using</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> limit =<span class="number">5</span>;</span><br><span class="line"><span class="keyword">auto</span> isMoreThan = [limit](<span class="type">int</span> n)&#123;<span class="keyword">return</span> n &gt; limit; &#125;;</span><br><span class="line"><span class="built_in">isMoreThan</span>(<span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<p>适用场景</p>
<ol>
<li>简单function</li>
<li>传局部变量到function</li>
<li>通过function pointer塞进function来添加更多的花样重载</li>
</ol>
<h3 id="functor-仿函数-x2F-函子"><a href="#functor-仿函数-x2F-函子" class="headerlink" title="functor 仿函数&#x2F;函子"></a>functor 仿函数&#x2F;函子</h3><p>是看起来像函数的<strong>类</strong>。通过重载()运算符使类的行为像函数，可以通过()调用。</p>
<p>lambdas是functors的一个变种。</p>
<p><img src="https://i.imgur.com/bip6UZ6.png"></p>
<p>也能用结构体实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this is a functor</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">add_x</span> &#123;</span><br><span class="line">  <span class="built_in">add_x</span>(<span class="type">int</span> val) : <span class="built_in">x</span>(val) &#123;&#125;  <span class="comment">// Constructor</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> y)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now you can use it like this:</span></span><br><span class="line"><span class="function">add_x <span class="title">add42</span><span class="params">(<span class="number">42</span>)</span></span>; <span class="comment">// create an instance of the functor class</span></span><br><span class="line"><span class="type">int</span> i = <span class="built_in">add42</span>(<span class="number">8</span>); <span class="comment">// and &quot;call&quot; it</span></span><br><span class="line"><span class="built_in">assert</span>(i == <span class="number">50</span>); <span class="comment">// and it added 42 to its argument</span></span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; in; <span class="comment">// assume this contains a bunch of values)</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">out</span><span class="params">(in.size())</span></span>;</span><br><span class="line"><span class="comment">// Pass a functor to std::transform, which calls the functor on every element </span></span><br><span class="line"><span class="comment">// in the input sequence, and stores the result to the output sequence</span></span><br><span class="line">std::<span class="built_in">transform</span>(in.<span class="built_in">begin</span>(), in.<span class="built_in">end</span>(), out.<span class="built_in">begin</span>(), <span class="built_in">add_x</span>(<span class="number">1</span>)); </span><br><span class="line"><span class="built_in">assert</span>(out[i] == in[i] + <span class="number">1</span>); <span class="comment">// for all i</span></span><br></pre></td></tr></table></figure>

<p>现成STL</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::function&lt;return_type(param_types)&gt; func;</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<ol>
<li><a href="https://stackoverflow.com/questions/356950/what-are-c-functors-and-their-uses">What are C++ functors and their uses?</a></li>
</ol>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>08 Template Classes and Const Correctness</title>
    <url>/2023/01/19/08_template_classes_and_const_correctness/</url>
    <content><![CDATA[<p><em>How do we make our classes general? How do we make them safe?</em></p>
<h2 id="Template-Classes"><a href="#Template-Classes" class="headerlink" title="Template Classes"></a>Template Classes</h2><h3 id="member-types"><a href="#member-types" class="headerlink" title="member types"></a>member types</h3><p>成员类型——为某种模板类赋一个名称</p>
<p><em>例：iterators</em></p>
<p>定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vector.h</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">vector</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> iterator = … <span class="comment">// something internal like T*</span></span><br><span class="line">iterator <span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用(after class specifier)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector::iterator it = a.<span class="built_in">begin</span>();</span><br></pre></td></tr></table></figure>



<p>在类接口中使用时（return），定义为嵌套类型(before class specifier)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vector.cpp</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> vector&lt;T&gt;::iterator vector&lt;T&gt;::<span class="built_in">begin</span>() &#123;...&#125;</span><br></pre></td></tr></table></figure>



<p>在函数模板中，&lt;&gt;中typename和class无区别</p>
<p>非类型形参，在模板定义的内部是常量，可以是整型，指针，引用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="type">int</span> a&gt; <span class="keyword">class</span> <span class="title class_">B</span>&#123;&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="Const-Correctness"><a href="#Const-Correctness" class="headerlink" title="Const Correctness"></a>Const Correctness</h2><h3 id="const-and-const-references"><a href="#const-and-const-references" class="headerlink" title="const and const references"></a>const and const references</h3><p>const function</p>
<p>只读iterator</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> const_ iterator = <span class="type">const</span> std::string*;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">end</span><span class="params">()</span><span class="type">const</span></span>;</span><br></pre></td></tr></table></figure>

<p>const iterator 不能改变iterator指向</p>
<p>const_iterator 不能改变指向地址中的内容</p>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>11 Operators</title>
    <url>/2023/01/19/11_operators/</url>
    <content><![CDATA[<h2 id="operator-overloading"><a href="#operator-overloading" class="headerlink" title="operator overloading"></a>operator overloading</h2><p><img src="https://i.imgur.com/mObcRf8.png"></p>
<h3 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vector&lt;string&gt;增加元素</span></span><br><span class="line">vector&lt;string&gt;&amp; vector&lt;string&gt;::<span class="keyword">operator</span>+=(<span class="type">const</span> std::string&amp; element)&#123;			<span class="comment">//const reference</span></span><br><span class="line">    <span class="built_in">push_back</span>(element);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;string&gt; vec;</span><br><span class="line">    <span class="type">const</span> string s = <span class="string">&quot;111&quot;</span>;</span><br><span class="line">    vec+= <span class="string">&quot;gggg&quot;</span>;		<span class="comment">//vec.operator+=(&quot;gggg&quot;); </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>concept check</p>
<ul>
<li><p>why return a reference</p>
</li>
<li><p>why return *this</p>
<p>another example</p>
</li>
</ul>
<p>修改 class StringVector 的 + 操作符</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">StringVector StringVector::<span class="keyword">operator</span>+(<span class="type">const</span> StringVector other) <span class="type">const</span> &#123;</span><br><span class="line">    StringVector result = *<span class="keyword">this</span>; <span class="comment">//copy constructor</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> std::string&amp; s : other)&#123;</span><br><span class="line">        result += s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="General-rule-of-thumb"><a href="#General-rule-of-thumb" class="headerlink" title="General rule of thumb:"></a>General rule of thumb:</h3><h4 id="member-vs-non-member"><a href="#member-vs-non-member" class="headerlink" title="member vs. non-member"></a>member vs. non-member</h4><ol>
<li>implement as members ( eg. [], (), -&gt;, &#x3D;)</li>
<li>implement as non-members (eg. &lt;&lt;)</li>
<li>一元操作符 implement as member (eg. ++)</li>
<li>处理符号两侧 equally , implement as non-member ( maybe <strong>friend</strong> ) (eg. +, &lt;)</li>
<li>not both equally, member (eg. +&#x3D;) 修改了某一个的值</li>
</ol>
<h4 id="const-vs-non-const-for-member-functions"><a href="#const-vs-non-const-for-member-functions" class="headerlink" title="const vs. non-const for member functions"></a>const vs. non-const for member functions</h4><p>const 对象只能调用 const function</p>
<p>可申明一个 const 版本</p>
<h3 id="Principle-of-Least-Astonishment-POLA"><a href="#Principle-of-Least-Astonishment-POLA" class="headerlink" title="Principle of Least Astonishment (POLA)"></a>Principle of Least Astonishment (POLA)</h3><p>参考</p>
<ol>
<li><a href="https://www.youtube.com/watch?v=9i_TNfhVvSM&list=PLCgD3ws8aVdolCexlz8f3U-RROA0s5jWA&index=19&ab_channel=AveryWang">https://www.youtube.com/watch?v=9i_TNfhVvSM&amp;list=PLCgD3ws8aVdolCexlz8f3U-RROA0s5jWA&amp;index=19&amp;ab_channel=AveryWang</a></li>
</ol>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>15 RALL</title>
    <url>/2023/01/19/15_RAll_smartpointers_buildingprojects/</url>
    <content><![CDATA[<h2 id="RAll"><a href="#RAll" class="headerlink" title="RAll"></a>RAll</h2><p><em>a coding standard and practice</em></p>
<h3 id="exceptions"><a href="#exceptions" class="headerlink" title="exceptions"></a>exceptions</h3><p><strong>resources that need to be released</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Acquire</th>
<th>Release</th>
</tr>
</thead>
<tbody><tr>
<td>Heap memory</td>
<td>new</td>
<td>delete</td>
</tr>
<tr>
<td>Files</td>
<td>open</td>
<td>close</td>
</tr>
<tr>
<td>Lock</td>
<td>try_lock</td>
<td>unlock</td>
</tr>
<tr>
<td>Sockets</td>
<td>socket</td>
<td>close</td>
</tr>
</tbody></table>
<p><strong>exceptions</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//code associated with exception handler</span></span><br><span class="line">&#125; <span class="built_in">catch</span>()&#123;</span><br><span class="line">    <span class="comment">//exception handler</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>enforcing exception safety</strong> 抛异常的可能性大小</p>
<ul>
<li>Nothrow exception guarantee(destructors, …)</li>
<li>…</li>
<li>No exception guarantee (memory corruption, …)</li>
</ul>
<p><strong>RAII</strong></p>
<p>又名</p>
<p>scope based memory management</p>
<p>&#x2F; constructor acquires, destructor releases</p>
<p>目标</p>
<ul>
<li>avoid calling <em>new</em> and <em>delete</em> explicitly</li>
</ul>
<p>(资源出了scope自动释放)</p>
<p><img src="https://i.imgur.com/lZxDl9h.png"></p>
<p><img src="https://i.imgur.com/GzshscC.png"></p>
<h3 id="Smart-Pointers"><a href="#Smart-Pointers" class="headerlink" title="Smart Pointers"></a>Smart Pointers</h3><p><em>put SMFs to good use</em></p>
<p>在constructor中acquire，在destructor中release</p>
<ul>
<li>std::unique_ptr<ul>
<li>Uniquely owns its resource, can’t be copied</li>
</ul>
</li>
<li>std::shared_ptr<ul>
<li>Can make copies, destructed when underlying memory goes out of scope</li>
</ul>
</li>
<li>std::weak_ptr<ul>
<li>Models temporary ownership: when an object only needs to be accessed if it exists (convert to shared_ptr to access)</li>
</ul>
</li>
</ul>
<p><strong>In practice</strong></p>
<p><img src="https://i.imgur.com/ybziOx5.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//create smart pointers</span></span><br><span class="line">std::unique_ptr&lt;T&gt; up&#123;<span class="keyword">new</span> T&#125;;</span><br><span class="line">std::shared_ptr&lt;T&gt; sp&#123;<span class="keyword">new</span> T&#125;;</span><br><span class="line">std::weak_ptr&lt;T&gt; wp=sp;<span class="comment">//can only be copy/ move constructed</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//better one</span></span><br><span class="line">std::unique_ptr&lt;T&gt; up = std::<span class="built_in">make_unique</span>&lt;T&gt;();</span><br><span class="line">std::unique_ptr&lt;T&gt; sp = std::<span class="built_in">make_shared</span>&lt;T&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="Building-C-Projects"><a href="#Building-C-Projects" class="headerlink" title="Building C++ Projects"></a>Building C++ Projects</h3><p>v</p>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>12 Special Member Functions</title>
    <url>/2023/01/19/12_special_member_functions/</url>
    <content><![CDATA[<p>every class has them by default</p>
<table>
<thead>
<tr>
<th>special member functions</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Default constructor</td>
<td>不传参的默认构造</td>
</tr>
<tr>
<td>Destructor</td>
<td>回收空间</td>
</tr>
<tr>
<td>Copy constructor</td>
<td>复制一份值创建新对象 (constructor)</td>
</tr>
<tr>
<td>Copy assignment operator</td>
<td>Assigns an already existing object to another (覆盖)</td>
</tr>
<tr>
<td>Move constructor</td>
<td></td>
</tr>
<tr>
<td>Move assignment operator</td>
<td></td>
</tr>
</tbody></table>
<p><img src="https://i.imgur.com/vduoRSX.png"></p>
<h3 id="constructor-and-destructor"><a href="#constructor-and-destructor" class="headerlink" title="constructor and destructor"></a>constructor and destructor</h3><h4 id="initializer-lists"><a href="#initializer-lists" class="headerlink" title="initializer lists"></a>initializer lists</h4><p>冒号后用逗号分隔的列表</p>
<p>解决问题：将成员变量设为默认值再reassign效率低</p>
<p>before</p>
<p><img src="https://i.imgur.com/pjGILc0.png"></p>
<p>after</p>
<p><img src="https://i.imgur.com/F7YGcRl.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//default constructor</span></span><br><span class="line">StringVector::<span class="built_in">StringVector</span>():</span><br><span class="line">	<span class="built_in">logicalSize</span>(<span class="number">0</span>), <span class="built_in">allocatedSize</span>(kInitialSize)&#123;</span><br><span class="line">        elems = <span class="keyword">new</span> std::string[allocatedSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fill constructor</span></span><br><span class="line">StringVector::<span class="built_in">StringVector</span>(size_type n,<span class="type">const</span> std::string &amp;val):</span><br><span class="line">	<span class="built_in">loficalSize</span>(n),<span class="built_in">allocatedSize</span>(<span class="number">2</span>*n)&#123;</span><br><span class="line">        elems = =<span class="keyword">new</span> std::string[allocatedSize];</span><br><span class="line">        std::<span class="built_in">fill</span>(<span class="built_in">begin</span>(),<span class="built_in">end</span>(),val);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="copy-and-copy-assignment"><a href="#copy-and-copy-assignment" class="headerlink" title="copy and copy assignment"></a>copy and copy assignment</h3><p><em>deep copies vs. shallow copies</em></p>
<h4 id="copy-is-not-as-simple-as-copying-each-member"><a href="#copy-is-not-as-simple-as-copying-each-member" class="headerlink" title="copy is not as simple as copying each member"></a>copy is not as simple as copying each member</h4><p>当指针被复制时，并没有创建新的值，而是两个指针指向同一地址。调用destructor时有空间被free两次。</p>
<p> deep copy: complete, independent copy of original</p>
<p><strong>copy assignment</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StringVector v1,v2;</span></span><br><span class="line"><span class="comment">//v1=v2;</span></span><br><span class="line">StringVector&amp; StringVector::<span class="keyword">operator</span>=(<span class="type">const</span> StringVector&amp; other)&#123;</span><br><span class="line">    <span class="comment">//copy logicalSize, copy allocatedSize, make sure array length same</span></span><br><span class="line">    <span class="comment">//free the old vector</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;other)&#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] elems;</span><br><span class="line">    allocatedSize = other.allocatedSize;</span><br><span class="line">    logicalSize = other.logicalSize;</span><br><span class="line">    elems = <span class="keyword">new</span> std::string[allocatedSize];</span><br><span class="line">    std::<span class="built_in">copy</span>(other.<span class="built_in">begin</span>(),other.<span class="built_in">end</span>(),<span class="built_in">begin</span>());</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="default-and-delete"><a href="#default-and-delete" class="headerlink" title="default and delete"></a>default and delete</h3><p><em>changing functionality using SMFS</em></p>
<p> &#x3D; delete 删除函数</p>
<p><img src="https://i.imgur.com/iNnNLAI.png"></p>
<p><img src="https://i.imgur.com/GZc4ixK.png"></p>
<p>何时需要重写默认的 special functions</p>
<p>常见于对象拥有 class 以外的资源 (pointers, mutexes, file streams)</p>
<h3 id="move-and-move-assignment"><a href="#move-and-move-assignment" class="headerlink" title="move and move assignment"></a>move and move assignment</h3><p>对象在参数传递时会复制多次，造成资源浪费</p>
<p><img src="https://i.imgur.com/MtBaWqZ.png"></p>
<p>改进</p>
<p><img src="https://i.imgur.com/N2cmFvj.png"></p>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>13 Move Semantics</title>
    <url>/2023/01/19/13_move_semantics/</url>
    <content><![CDATA[<p><em>how can we avoid making unnecessary copies of resources</em></p>
<h2 id="Move-Semantics"><a href="#Move-Semantics" class="headerlink" title="Move Semantics"></a>Move Semantics</h2><p><strong>aside: emplace_back</strong></p>
<p>vector 的一个 function</p>
<p><strong>直接</strong>添加元素到vector中 <strong>(no copy)</strong></p>
<p><img src="https://i.imgur.com/z1WN7m4.png"></p>
<p>可接受任意数量的参数</p>
<p><img src="https://i.imgur.com/DHSBykC.png"></p>
<h3 id="l-values-vs-r-values"><a href="#l-values-vs-r-values" class="headerlink" title="l-values vs. r-values"></a>l-values vs. r-values</h3><p><strong>r-values</strong></p>
<ul>
<li>temporary</li>
<li>don’t have names</li>
<li>live until the end of the line</li>
<li>copy</li>
</ul>
<p><strong>l-values</strong></p>
<ul>
<li>not temporary</li>
<li>have names</li>
<li>live until the end of the scope</li>
<li>copy and move</li>
</ul>
<p>only l-values can be referenced using <strong>&amp;</strong></p>
<p>r-values can be bound to <strong>const &amp;</strong></p>
<p>r-value reference  <strong>&amp;&amp;</strong> (extend r-value’s lifetime)</p>
<p><img src="https://i.imgur.com/cGBOXLJ.png"></p>
<h3 id="move-constructor-and-assignment"><a href="#move-constructor-and-assignment" class="headerlink" title="move constructor and assignment"></a>move constructor and assignment</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//move constructor</span></span><br><span class="line"></span><br><span class="line">StrVector::<span class="built_in">StrVector</span>(StrVector&amp;&amp; other):</span><br><span class="line">	<span class="built_in">elem</span>(other.elems),</span><br><span class="line">	<span class="built_in">logicalSize</span>(other.logicalSize),</span><br><span class="line">	<span class="built_in">allocatedSize</span>(other.allocatedSize)&#123;</span><br><span class="line">        other.elems = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/TyLVPQG.png"></p>
<p><strong>std::move</strong> casts a variable to an r-value</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Axess</span>(Axess&amp;&amp; other) : <span class="built_in">students</span>(std::<span class="built_in">move</span>(other.students))&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Axess&amp; <span class="keyword">operator</span>=(Axess&amp;&amp; rhs) &#123;</span><br><span class="line">     students = std::<span class="built_in">move</span>(rhs.students);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T&amp; a,T&amp; b)</span></span>&#123;</span><br><span class="line">    T temp = std::<span class="built_in">move</span>(a);</span><br><span class="line">    a = std::<span class="built_in">move</span>(b);</span><br><span class="line">    b = std::<span class="built_in">move</span>(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>14 std Optional and Type Safety</title>
    <url>/2023/01/19/14_std_optional_and_type_safety/</url>
    <content><![CDATA[<p><em>How can we use c++’s type system to prevent errors at compile time?</em></p>
<h2 id="std-optional-and-Type-Safety"><a href="#std-optional-and-Type-Safety" class="headerlink" title="std::optional and Type Safety"></a>std::optional and Type Safety</h2><h3 id="Type-Safety"><a href="#Type-Safety" class="headerlink" title="Type Safety"></a>Type Safety</h3><p><strong>const-interface</strong>: All member functions marked const in a class definition.</p>
<p>Objects of type <em>const ClassName</em> may only use the const-interface.</p>
<p><strong>type safety</strong>: guarantee the behavior of programs</p>
<p><img src="https://i.imgur.com/Sg91Dlt.png"></p>
<p><img src="https://i.imgur.com/5t8piRO.png"></p>
<h4 id="std-optional-lt-T-gt"><a href="#std-optional-lt-T-gt" class="headerlink" title="std::optional&lt;T&gt;"></a>std::optional&lt;T&gt;</h4><p>either contain a value of type T or nothing (nullopt)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::optional&lt;<span class="type">int</span>&gt; num1=&#123;&#125;;<span class="comment">//not have a value</span></span><br><span class="line">    num1 = std::optional&lt;<span class="type">int</span>&gt;&#123;<span class="number">1</span>&#125;;<span class="comment">//has a value</span></span><br><span class="line">    num1 = std::<span class="literal">nullopt</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用例</p>
<p><img src="https://i.imgur.com/CSR8bVK.png"></p>
<p>An optional take on realVector</p>
<h3 id="The-need-for-“sometimes-a-thing”"><a href="#The-need-for-“sometimes-a-thing”" class="headerlink" title="The need for “sometimes-a-thing”"></a>The need for “sometimes-a-thing”</h3>]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Assignment3</title>
    <url>/2022/11/13/assignment3/</url>
    <content><![CDATA[<h2 id="hashmap"><a href="#hashmap" class="headerlink" title="hashmap"></a>hashmap</h2><h3 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h3><p>map的实现方式</p>
<ol>
<li><p>平衡二叉搜索树</p>
</li>
<li><p>hash map √</p>
</li>
</ol>
<h3 id="milestone-1-const-correctness"><a href="#milestone-1-const-correctness" class="headerlink" title="milestone 1: const-correctness"></a>milestone 1: const-correctness</h3><p>make <strong>const-interface</strong></p>
<ol>
<li><p>将 main.cpp student_main() 中必要的参数声明为 const</p>
</li>
<li><p>将 hashmap.cpp 和 hashmap.h 中对应的函数声明为 const</p>
</li>
<li><p>添加<strong>重载</strong>函数（使用 const_iterator）</p>
</li>
</ol>
<h3 id="代码内容"><a href="#代码内容" class="headerlink" title="代码内容"></a>代码内容</h3><p>K &#x3D; key type</p>
<p>M &#x3D; mapped type</p>
<p>H &#x3D; hash function type used to hash a key</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">* Example:</span><br><span class="line">*      HashMap&lt;std::string, <span class="type">int</span>&gt;</span><br><span class="line">*      This means K = key = std::string,</span><br><span class="line">*                 M = mapped = <span class="type">int</span>,</span><br><span class="line">*                 value_type = std::pair&lt;<span class="type">const</span> std::string, <span class="type">int</span>&gt;.</span><br></pre></td></tr></table></figure>

<p><strong>H &#x3D; std::hash&lt;K&gt;</strong></p>
<h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>复用非const版本</p>
<p>const_iterator作用：返回只读iterator</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> M, <span class="keyword">typename</span> H&gt;</span><br><span class="line"><span class="keyword">typename</span> HashMap&lt;K, M, H&gt;::const_iterator HashMap&lt;K, M, H&gt;::<span class="built_in">begin</span>() <span class="type">const</span> &#123;</span><br><span class="line">    <span class="comment">// This is called the static_cast/const_cast trick, which allows us to reuse</span></span><br><span class="line">    <span class="comment">// the non-const version of find to implement the const version.</span></span><br><span class="line">    <span class="comment">// The idea is to cast this so it&#x27;s pointing to a non-const HashMap, which</span></span><br><span class="line">    <span class="comment">// calls the overload above (and prevent infinite recursion).</span></span><br><span class="line">    <span class="comment">// Also note that we are calling the conversion operator in the iterator class!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;const_iterator&gt;(<span class="keyword">const_cast</span>&lt;HashMap&lt;K, M, H&gt;*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">begin</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>static_cast</p>
<p>const_cast : 将 const type(&amp;) 转换为 type(&amp;)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">static_cast</span>&lt;要转的类型&gt;(内容)</span><br><span class="line"><span class="built_in">const_cast</span>&lt;type&gt;(expression)</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="left">添加为const类型的<strong>函数</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">size()</td>
</tr>
<tr>
<td align="left">empty()</td>
</tr>
<tr>
<td align="left">load_factor() &#x2F;&#x2F;size&#x2F;buket_count</td>
</tr>
<tr>
<td align="left">bucket_count()</td>
</tr>
<tr>
<td align="left">debug()</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>添加的重载</th>
</tr>
</thead>
<tbody><tr>
<td>end()</td>
</tr>
<tr>
<td>find(const K &amp;)</td>
</tr>
<tr>
<td>at(const K&amp; key)</td>
</tr>
</tbody></table>
<h4 id="short-questions"><a href="#short-questions" class="headerlink" title="short questions"></a>short questions</h4><ol>
<li><p>at() vs []</p>
<p>Explain the difference between at() and the implementation of the operator []. Wy did you have to overload one and not the other?</p>
</li>
</ol>
<p>​		根据注释，()重载了，[]暂时没有 const correction.</p>
<ol start="2">
<li><p>find vs <em>find</em></p>
<p>他说自己写的好，没有用 for 循环。</p>
</li>
<li><p>rall？</p>
</li>
</ol>
<p>​		rall：resource acquistion is initialiazation</p>
<p>​		将资源封装到类中，析构函数释放资源；</p>
<p>​		通过实例占用资源；</p>
<p>​		对象超出范围时资源自动释放。</p>
<p>​		作用：<strong>保证退出时资源的释放</strong></p>
<ol start="4">
<li><p>operator++</p>
<p>operator++()</p>
<p>指针后移一格，若为该桶最后一个就往后挪个桶，直到找到不为空的项，返回pointer。</p>
</li>
</ol>
<p>​	   operator++(int)：指针指向的内容值加一，并返回加一后的值</p>
<p>pieces</p>
<ol>
<li>为何被重载的函数不能用const在后面声明</li>
<li>noexcept 函数后声明，不抛出error</li>
</ol>
<p>参考</p>
<ol>
<li><a href="https://stackoverflow.com/questions/2321511/what-is-meant-by-resource-acquisition-is-initialization-raii">What is meant by Resource Acquisition is Initialization (RAII)?</a></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>CS106L笔记</category>
      </categories>
  </entry>
</search>
